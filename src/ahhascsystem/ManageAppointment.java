package ahhascsystem;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

public class ManageAppointment extends javax.swing.JFrame {
    /**
     * Creates new form BookAppointment
     */
    DefaultTableModel model = new DefaultTableModel();
    DefaultComboBoxModel<String> comboBox = new DefaultComboBoxModel<>();
    
    public ManageAppointment() {
        initComponents();
        DataIO.readAppointment();
        checkDate();
        model = (DefaultTableModel) appointmentTable.getModel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cusName = new javax.swing.JTextField();
        pickDate = new com.toedter.calendar.JCalendar();
        jLabel6 = new javax.swing.JLabel();
        datePicked = new javax.swing.JTextField();
        pickBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        chooseAppliance = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        assignTech = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        chooseTime = new javax.swing.JComboBox<>();
        priceField = new javax.swing.JFormattedTextField();
        jPanel12 = new javax.swing.JPanel();
        bookBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Appointment Booking");
        jLabel1.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Appointment");
        setLocation(new java.awt.Point(350, 150));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel2.setText("Appointment Management");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel4.setText("Enter Customer's Name:");

        cusName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cusName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        cusName.setCaretColor(new java.awt.Color(51, 51, 51));
        cusName.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        pickDate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pickDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel6.setText("Pick A Date:");

        datePicked.setEditable(false);
        datePicked.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        datePicked.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        datePicked.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        pickBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        pickBtn.setText("PICK");
        pickBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        pickBtn.setMaximumSize(new java.awt.Dimension(60, 33));
        pickBtn.setMinimumSize(new java.awt.Dimension(60, 33));
        pickBtn.setPreferredSize(new java.awt.Dimension(60, 33));
        pickBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cusName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePicked, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addComponent(pickBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cusName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(datePicked, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        chooseAppliance.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        chooseAppliance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Air Conditioner", "Air Fryer", "Blender", "Dryer", "Electric Fan", "Electric Kettle", "Fan", "Microwave", "Oven", "Refrigerator", "Vacuum Cleaner", "Washing Machine" }));
        chooseAppliance.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        chooseAppliance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chooseAppliance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseApplianceActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel3.setText("Choose Appliances:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel5.setText("Price (RM):");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel7.setText("Assign Technician:");

        assignTech.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        assignTech.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        assignTech.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        assignTech.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        assignTech.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                assignTechItemStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel8.setText("Choose A Time:");

        chooseTime.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        chooseTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        chooseTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chooseTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chooseTimeItemStateChanged(evt);
            }
        });

        priceField.setEditable(false);
        priceField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        priceField.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        priceField.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(assignTech, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(chooseTime, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(chooseAppliance, 0, 250, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(priceField))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignTech, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooseTime, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(priceField))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        bookBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        bookBtn.setText("BOOK");
        bookBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        bookBtn.setMaximumSize(new java.awt.Dimension(130, 40));
        bookBtn.setMinimumSize(new java.awt.Dimension(130, 40));
        bookBtn.setPreferredSize(new java.awt.Dimension(130, 40));
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        updateBtn.setText("UPDATE");
        updateBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        updateBtn.setMaximumSize(new java.awt.Dimension(130, 40));
        updateBtn.setMinimumSize(new java.awt.Dimension(130, 40));
        updateBtn.setPreferredSize(new java.awt.Dimension(130, 40));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        deleteBtn.setText("REMOVE");
        deleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        deleteBtn.setMaximumSize(new java.awt.Dimension(130, 40));
        deleteBtn.setMinimumSize(new java.awt.Dimension(130, 40));
        deleteBtn.setPreferredSize(new java.awt.Dimension(130, 40));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        clearBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        clearBtn.setText("CLEAR");
        clearBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        clearBtn.setMaximumSize(new java.awt.Dimension(130, 40));
        clearBtn.setMinimumSize(new java.awt.Dimension(130, 40));
        clearBtn.setPreferredSize(new java.awt.Dimension(130, 40));
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        appointmentTable.setBackground(new java.awt.Color(204, 255, 255));
        appointmentTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Customer Name", "Date", "Time", "Technician", "Appliance", "Price", "Status", "Payment", "Change"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentTable.getTableHeader().setReorderingAllowed(false);
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appointmentTable);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseApplianceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseApplianceActionPerformed
        // TODO add your handling code here:
        updatePriceField();
    }//GEN-LAST:event_chooseApplianceActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        // TODO add your handling code here:
        int appointmentID = manageAppointmentID();
        String customer = cusName.getText();
        String date = datePicked.getText();
        String time = (String) chooseTime.getSelectedItem();
        String technician = (String) assignTech.getSelectedItem();
        String appliance = (String) chooseAppliance.getSelectedItem();
        String priceStr = priceField.getText();
        String status = "Unpaid";
        int payment = 0;
        int change = 0;
        
        
        if (customer.isEmpty() || date.isEmpty() || " ".equals(time) || " ".equals(technician) || " ".equals(appliance) || priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }
        
        int price = Integer.parseInt(priceStr);
        
        if(!availableTime()){
            return;
        }
        
        if(model.getRowCount() > 0){
            boolean appointmentExists = appointmentExists(date, time, technician, status);
        
            if(appointmentExists){
                JOptionPane.showMessageDialog(this, "Appointment has been booked already!");
            }
            else{
                model.addRow(new Object[]{appointmentID, customer, date, time, technician, appliance, price, status, payment, change});
                JOptionPane.showMessageDialog(this, "Appointment Added!");
                appointmentID++;
                clear();
            }
        }
        else{
            model.addRow(new Object[]{appointmentID, customer, date, time, technician, appliance, price, status, payment, change});
            JOptionPane.showMessageDialog(this, "Appointment Added!");
            appointmentID++;
            clear();
        }

    }//GEN-LAST:event_bookBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        if(appointmentTable.getSelectedRowCount() == 1){
            String customer = cusName.getText();
            String date = datePicked.getText();
            String time = (String) chooseTime.getSelectedItem();
            String technician = (String) assignTech.getSelectedItem();
            String appliance = (String) chooseAppliance.getSelectedItem();
            String priceStr = priceField.getText();

            if (customer.isEmpty() || date.isEmpty() || " ".equals(time) || " ".equals(technician) || " ".equals(appliance) || priceStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;
            }
            
            if(!updateAvailableTime()){
                return;
            }
            
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to update the selected row?", "Confirm Update", JOptionPane.YES_NO_OPTION);
            
            if (option == JOptionPane.YES_OPTION){
                int price = Integer.parseInt(priceStr);

                model.setValueAt(customer, appointmentTable.getSelectedRow(), 1);
                model.setValueAt(date, appointmentTable.getSelectedRow(), 2);
                model.setValueAt(time, appointmentTable.getSelectedRow(), 3);
                model.setValueAt(technician, appointmentTable.getSelectedRow(), 4);
                model.setValueAt(appliance, appointmentTable.getSelectedRow(), 5);
                model.setValueAt(price, appointmentTable.getSelectedRow(), 6);
                JOptionPane.showMessageDialog(this, "Appointment Updated!");
                clear();
            }
        }
        else if(appointmentTable.getSelectedRowCount() == 0){
            JOptionPane.showMessageDialog(this, "Please select an appointment to update");
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select only one appointment to update");
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        if(appointmentTable.getSelectedRowCount() == 1){
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected row?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION){
                model.removeRow(appointmentTable.getSelectedRow());
                JOptionPane.showMessageDialog(this, "Appointment Deleted!");
                clear();
            }
        }
        else if(appointmentTable.getSelectedRowCount() == 0){
            JOptionPane.showMessageDialog(this, "Please select an appointment to delete");
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select only one appointment to delete");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void pickBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickBtnActionPerformed
        // TODO add your handling code here:
        Date selectedDate = pickDate.getDate();
        
        Date currentDate = new Date();
        
        if(selectedDate != null && selectedDate.after(currentDate)){
            SimpleDateFormat date = new SimpleDateFormat("dd-MMMM-yyyy");
            datePicked.setText(date.format(selectedDate));
            assignTech.setEnabled(true);
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select a future date.");
        }  
    }//GEN-LAST:event_pickBtnActionPerformed

    private void appointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = appointmentTable.getSelectedRow();
        
        String tableCusName = (String) model.getValueAt(selectedRow, 1);
        String tableDatePicked = (String) model.getValueAt(selectedRow, 2);
        String tableChooseTime = (String) model.getValueAt(selectedRow, 3);
        String tableAssignTech = (String) model.getValueAt(selectedRow, 4);
        String tableChooseAppliance = (String) model.getValueAt(selectedRow, 5);
        
        cusName.setText(tableCusName);
        datePicked.setText(tableDatePicked);
        assignTech.setSelectedItem(tableAssignTech);
        chooseTime.setSelectedItem(tableChooseTime);
        chooseAppliance.setSelectedItem(tableChooseAppliance);
        
        updatePriceField();
        disablePaidAppointments();
    }//GEN-LAST:event_appointmentTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int exit = JOptionPane.showConfirmDialog(this, "Are you sure to exit?", "Confirm Exit", JOptionPane.YES_NO_OPTION);
        if(exit == JOptionPane.YES_OPTION){
            JOptionPane.showMessageDialog(this, "Saving Appointments...");
            convertData();
            DataIO.writeAppointment();
            Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Appointments Saved!");
                dispose();
                LoginPage.managerMenu.setVisible(true);
            }
        });
        timer.setRepeats(false);
        timer.start();
        }
  
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if(DataIO.allAppointments.isEmpty()){
            JOptionPane.showMessageDialog(this, "No existing appointments.");
        }
        else{
            model.setRowCount(0);
            displayTechnicians();
            displayAppointments();
            displayAllTimes();
            assignTech.setEnabled(false);
            chooseTime.setEnabled(false);

        }
    }//GEN-LAST:event_formWindowOpened

    private void assignTechItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_assignTechItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() ==  java.awt.event.ItemEvent.SELECTED){
            techAvailability();
        }
    }//GEN-LAST:event_assignTechItemStateChanged

    private void chooseTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chooseTimeItemStateChanged
        // TODO add your handling code here:
//        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED){
//            availableTime();
//        }
    }//GEN-LAST:event_chooseTimeItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentTable;
    private javax.swing.JComboBox<String> assignTech;
    private javax.swing.JButton bookBtn;
    private javax.swing.JComboBox<String> chooseAppliance;
    private javax.swing.JComboBox<String> chooseTime;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField cusName;
    private javax.swing.JTextField datePicked;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pickBtn;
    private com.toedter.calendar.JCalendar pickDate;
    private javax.swing.JFormattedTextField priceField;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    private void displayAppointments(){
        for(int i=0; i<DataIO.allAppointments.size(); i++){
            Appointment appointment = DataIO.allAppointments.get(i);

            int getAppointmentID = appointment.getAppointmentID();
            String customer = appointment.getCustomer();
            String date = appointment.getDate();
            String time = appointment.getTime();
            String technician = appointment.getTechnician();
            String appliance = appointment.getAppliance();
            int price = appointment.getPrice();
            String status = appointment.getStatus();
            int payment = appointment.getPayment();
            int change = appointment.getChange();

            Object [] appointmentData = {getAppointmentID, customer, date, time, technician, appliance, price, status, payment, change};
            model.addRow(appointmentData); 
        }        
    }
    
    private boolean appointmentExists(String date, String time, String technician, String status){
        for(int i=0; i<model.getRowCount();i++){
            String getDate = (String) model.getValueAt(i, 2);
            String getTime = (String) model.getValueAt(i, 3);
            String getTech = (String) model.getValueAt(i, 4);
            String getStatus = (String) model.getValueAt(i, 7);
            
            if(getDate.equals(date) && getTime.equals(time) && getTech.equals(technician) && getStatus.equals(status)){
                return true;
            }
        }  
        return false;
    }
    
    private boolean availableTime(){
        String date = datePicked.getText();
        String technician = (String) assignTech.getSelectedItem();
        String time = (String) chooseTime.getSelectedItem();
        
        if(appointmentExists(date, time, technician, "Unpaid")){
            JOptionPane.showMessageDialog(this, "This time has been booked!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if("9 A.M.".equals(time) || "10 A.M.".equals(time) || "11 A.M.".equals(time)){
            if (appointmentExists(date, "9 A.M.", technician, "Unpaid") ||
                appointmentExists(date, "10 A.M.", technician, "Unpaid") ||
                appointmentExists(date, "11 A.M.", technician, "Unpaid")){
                JOptionPane.showMessageDialog(this, "Technician is not available in the morning.");
                return false;
            }
        }
        
        if("1 P.M.".equals(time) || "2 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time)){
            if (appointmentExists(date, "1 P.M.", technician, "Unpaid") || 
                appointmentExists(date, "2 P.M.", technician, "Unpaid") || 
                appointmentExists(date, "3 P.M.", technician, "Unpaid") || 
                appointmentExists(date, "4 P.M.", technician, "Unpaid")) {
                JOptionPane.showMessageDialog(this, "Technician is not available in the afternoon.");
                return false;
            }
        }
        return true;
    }
    
    
    private void displayTechnicians(){
        for(int i=0; i<DataIO.allTechnicians.size(); i++){
            Technician technician = DataIO.allTechnicians.get(i);
            
            String techname = technician.getName();
            assignTech.addItem(techname);
        }
    }
    
    private String determineTime(String time){
        switch(time){
            case "9 A.M.":
            case "10 A.M.":
            case "11 A.M.":
                return "Morning";
            case "1 P.M.":
            case "2 P.M.":
            case "3 P.M.":
            case "4 P.M.":
                return "Afternoon";
            default:
                return " ";
        }
    }
    
    private String[] bookedTimes(){
        String date = datePicked.getText();
        String technician = (String) assignTech.getSelectedItem();
        ArrayList<String> bookedTimes = new ArrayList<>();
        
        if(!" ".equals(technician)){ //Add date comparison
            for(int i=0; i<model.getRowCount();i++){
                String getDate = (String) model.getValueAt(i, 2);
                String getTime = (String) model.getValueAt(i, 3);
                String getTech = (String) model.getValueAt(i, 4);
                String getStatus = (String) model.getValueAt(i, 7);
                
                if(getDate.equals(date) && "Unpaid".equals(getStatus) && getTech.equals(technician)){
                    bookedTimes.add(getTime);
                }
            }
            String[] bookedTimeArray = bookedTimes.toArray(new String[bookedTimes.size()]);
            return bookedTimeArray;
        }
        else{
            chooseTime.setEnabled(false);
        }
        return null;
    }
    
    private int timeCase(String[] bookedTimeArray){
        int morning = 0;
        int afternoon = 0;
        
        if(bookedTimeArray != null){
            for(int i=0; i<bookedTimeArray.length; i++){
                String determineTime = determineTime(bookedTimeArray[i]);
                if("Morning".equals(determineTime)){
                    morning++;
                }
                else if("Afternoon".equals(determineTime)){
                    afternoon++;
                }
            }
        
            if(morning == 0 && afternoon == 0){
                return 0;
            }
            else if(morning > 0 && afternoon == 0){
                return 1;
            }
            else if(morning == 0 && afternoon > 0){
                return 2;
            }
            else if(morning > 0 && afternoon > 0){
                return 3;
            }  
        }          
        return -1;
    }
    
    private void techAvailability(){
        int timeCase = timeCase(bookedTimes());
        
        switch(timeCase){
            case 0:
                JOptionPane.showMessageDialog(this, "Available all day.");
                chooseTime.setEnabled(true);
                break;
                
            case 1:
                JOptionPane.showMessageDialog(this, "Available in the afternoon.");
                chooseTime.setEnabled(true);
                break;
            
            case 2:
                JOptionPane.showMessageDialog(this, "Available in the morning.");
                chooseTime.setEnabled(true);
                break;
            
            case 3:
                JOptionPane.showMessageDialog(this, "Not available on this day.");
                chooseTime.setEnabled(true);
                break;
                
            default:
                break;
        }
    }
    
    private boolean updateAvailableTime(){
        int timeCase = timeCase(bookedTimes());
        String time = (String) chooseTime.getSelectedItem();
        int selectedRow = appointmentTable.getSelectedRow();
        String appTime = (String) model.getValueAt(selectedRow, 3);
        
        if(time.equals(appTime)){
            return true;
        }
        
        else{
            switch(timeCase){
                case 0:
                    JOptionPane.showMessageDialog(this, "Technician is available on this day.");
                    return true;

                case 1:
                    return true;
//                    if("Morning".equals(determineTime(appTime))){
//                        if(("9 A.M.".equals(appTime) && ("10 A.M.".equals(time) || "11 A.M.".equals(time))) ||
//                           ("10 A.M.".equals(appTime) && ("9 A.M.".equals(time) || "11 A.M.".equals(time))) ||
//                           ("11 A.M.".equals(appTime) && ("9 A.M.".equals(time) || "10 A.M.".equals(time)))) {
//                              return true;
//                          }
//                    }
//                    else{
//                        JOptionPane.showMessageDialog(this, "Technician is not available in the morning.");
//                        return false;
//                    }
                    //break;

                case 2:
                    return true;
//                    if("Afternoon".equals(determineTime(appTime))){
//                        if(("1 P.M.".equals(appTime) && ("2 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time))) ||
//                           ("2 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time))) ||
//                           ("3 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "2 P.M.".equals(time) || "4 P.M.".equals(time))) ||
//                           ("4 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "2 P.M.".equals(time) || "3 P.M.".equals(time)))) {
//                             return true;
//                         }
//                    }
//                    else{
//                        JOptionPane.showMessageDialog(this, "Technician is not available in the afternoon.");
//                        return false;
//                    }
//                    if("1 P.M.".equals(time) || "2 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time)){
//                        JOptionPane.showMessageDialog(this, "Technician is not available in the afternoon.");
//                        return false;
//                    }
//                    break;

                case 3:
                    if("Morning".equals(determineTime(appTime))){
                        if(("9 A.M.".equals(appTime) && ("10 A.M.".equals(time) || "11 A.M.".equals(time))) ||
                           ("10 A.M.".equals(appTime) && ("9 A.M.".equals(time) || "11 A.M.".equals(time))) ||
                           ("11 A.M.".equals(appTime) && ("9 A.M.".equals(time) || "10 A.M.".equals(time)))) {
                              return true;
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Technician is not available in the afternoon.");
                            return false;
                        }
                    }
                    if("Afternoon".equals(determineTime(appTime))){
                        if(("1 P.M.".equals(appTime) && ("2 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time))) ||
                           ("2 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time))) ||
                           ("3 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "2 P.M.".equals(time) || "4 P.M.".equals(time))) ||
                           ("4 P.M.".equals(appTime) && ("1 P.M.".equals(time) || "2 P.M.".equals(time) || "3 P.M.".equals(time)))) {
                             return true;
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Technician is not available in the morning.");
                            return false;
                        }
                    }                    
//                    if("9 A.M.".equals(time) || "10 A.M.".equals(time) || "11 A.M.".equals(time) || 
//                        "1 P.M.".equals(time) || "2 P.M.".equals(time) || "3 P.M.".equals(time) || "4 P.M.".equals(time)){
//                        JOptionPane.showMessageDialog(this, "Technician is not available on this day.");
//                        return false;
//                    }
//                    break;
            }
        }

        return true;
    }
    
    private void displayAllTimes(){
        chooseTime.addItem(" ");
        chooseTime.addItem("9 A.M.");
        chooseTime.addItem("10 A.M.");
        chooseTime.addItem("11 A.M.");
        chooseTime.addItem("1 P.M.");
        chooseTime.addItem("2 P.M.");
        chooseTime.addItem("3 P.M.");
        chooseTime.addItem("4 P.M.");
    }
    
    private void updatePriceField() {
        String selectedAppliance = (String) chooseAppliance.getSelectedItem();
        if (selectedAppliance != null) {
            int price = getPriceForAppliance(selectedAppliance);
            priceField.setValue(price);
        }
    }

    private int getPriceForAppliance(String appliance) {
        switch(appliance){
            case "Air Conditioner":
                return 500;
            case "Air Fryer":
                return 150;
            case "Blender":
                return 100;
            case "Dryer":
                return 300;
            case "Electric Fan":
                return 200;
            case "Electric Kettle":
                return 50;
            case "Fan":
                return 60;
            case "Microwave":
                return 90;
            case "Oven":
                return 80;
            case "Refrigerator":
                return 450;
            case "Vacuum Cleaner":
                return 180;
            case "Washing Machine":
                return 600;
            default:
                return 0;
        }
    }
    
    private void checkDate(){
        Date today = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(today);
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date tomorrow = calendar.getTime();
        pickDate.getDayChooser().setMinSelectableDate(tomorrow);
    }
    
    private void clear(){
        cusName.setText(null);
        datePicked.setText(null);
        chooseTime.setSelectedIndex(0);
        assignTech.setSelectedIndex(0);
        chooseAppliance.setSelectedIndex(0);
        priceField.setText(null);
        chooseTime.setEnabled(false);
        assignTech.setEnabled(false);
    }
    
    public static ArrayList<Appointment> allAppointments = new ArrayList<Appointment>();
    
    private void convertData(){
        int rowCounts = model.getRowCount();
        allAppointments.clear();
        try{
            for(int i=0; i<rowCounts; i++){
                int getAppointmentID = (int) model.getValueAt(i, 0);
                String customer = (String) model.getValueAt(i, 1);
                String date = (String) model.getValueAt(i, 2);
                String time = (String) model.getValueAt(i, 3);
                String technician = (String) model.getValueAt(i, 4);
                String appliance = (String) model.getValueAt(i, 5);
                int price = (int) model.getValueAt(i, 6);
                String status = (String) model.getValueAt(i, 7);
                int payment = (int) model.getValueAt(i, 8);
                int change = (int) model.getValueAt(i, 9);

                Appointment appointment = new Appointment(getAppointmentID, customer, date, time, technician, appliance, price, status, payment, change);
                allAppointments.add(appointment);
            }
        }
        catch (Exception e){
            
        }
    }
    
    private int manageAppointmentID(){
        int appointmentID;
        if(model.getRowCount() == 0){
            appointmentID = 10001;
        }
        else{
            appointmentID = (int) model.getValueAt(model.getRowCount()-1, 0) + 1;
        }
        return appointmentID;
    }
    
    private void disablePaidAppointments(){
        String status = (String) model.getValueAt(appointmentTable.getSelectedRow(), 7);
        if("Paid".equals(status)){
            cusName.setEnabled(false);
            datePicked.setEnabled(false);
            pickBtn.setEnabled(false);
            bookBtn.setEnabled(false);
            updateBtn.setEnabled(false);
            deleteBtn.setEnabled(false);
            chooseTime.setEnabled(false);
            assignTech.setEnabled(false);
            chooseAppliance.setEnabled(false);
            priceField.setEnabled(false);
        }
        else if("Unpaid".equals(status)){
            cusName.setEnabled(true);
            datePicked.setEnabled(true);
            pickBtn.setEnabled(true);
            bookBtn.setEnabled(true);
            updateBtn.setEnabled(true);
            deleteBtn.setEnabled(true);
            assignTech.setEnabled(true);
            chooseTime.setEnabled(true);
            chooseAppliance.setEnabled(true);
            priceField.setEnabled(true);
        }
    }
}