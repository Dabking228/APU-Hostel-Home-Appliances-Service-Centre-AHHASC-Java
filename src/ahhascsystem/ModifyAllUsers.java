package ahhascsystem;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ModifyAllUsers extends javax.swing.JFrame {

    /**
     * Creates new form ModifyAllTechnicians
     */
    DefaultTableModel model = new DefaultTableModel();
    
    
    public ModifyAllUsers() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        getUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        getConfirmPassword = new javax.swing.JPasswordField();
        showConfirmPassword = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        getPassword = new javax.swing.JPasswordField();
        showPassword = new javax.swing.JToggleButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modify Users");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Modify Users");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password", "User Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Username");

        getUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("ConfirmPassword");

        getConfirmPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        showConfirmPassword.setText("Show");
        showConfirmPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showConfirmPasswordActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Password");

        getPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        showPassword.setText("Show");
        showPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        refreshBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        refreshBtn.setText("REFRESH");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(getPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(showPassword))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(getConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(showConfirmPassword))
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(180, 180, 180)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(11, 11, 11))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(getPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showConfirmPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(getConfirmPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        resetTable();
    }//GEN-LAST:event_formWindowOpened

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
        LoginPage.managerMenu.setVisible(true);
        resetTable();
        clearForm();
    }//GEN-LAST:event_backBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        
        String selectedName = (String) model.getValueAt(selectedRow, 0);
        String selectedPassword = (String) model.getValueAt(selectedRow, 1);
        
        getUsername.setText(selectedName);
        getPassword.setText(selectedPassword);
        getConfirmPassword.setText(selectedPassword);
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void showPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordActionPerformed
        if (showPassword.isSelected()) {
            getPassword.setEchoChar((char)0);
            showPassword.setText("Hide");
        } else {
            getPassword.setEchoChar('•');
            showPassword.setText("Show");
        }
    }//GEN-LAST:event_showPasswordActionPerformed

    private void showConfirmPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showConfirmPasswordActionPerformed
        if (showConfirmPassword.isSelected()) {
            getConfirmPassword.setEchoChar((char)0);
            showConfirmPassword.setText("Hide");
        } else {
            getConfirmPassword.setEchoChar('•');
            showConfirmPassword.setText("Show");
        }
    }//GEN-LAST:event_showConfirmPasswordActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(jTable1.getSelectedRowCount() == 1){
            String username = getUsername.getText();
            String selectedName = (String) model.getValueAt(jTable1.getSelectedRow(), 0);
            if (!username.equals(selectedName)) {
               JOptionPane.showMessageDialog(this, "Please ensure that username is correct."); 
               return;
            }
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected row?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION){
                
                String selectedRole = (String) model.getValueAt(jTable1.getSelectedRow(), 2);
                if (selectedRole.equals("Technician")) {
                    for (int i=0; i<DataIO.allTechnicians.size(); i++) {
                        if(DataIO.allTechnicians.get(i).getName().equals(username)){
                            DataIO.allTechnicians.remove(i);
                            DataIO.writeUser();
                        }
                    }
                } else if (selectedRole.equals("Customer")) {
                    for (int i=0; i<DataIO.allCustomers.size(); i++) {
                        if(DataIO.allCustomers.get(i).getName().equals(username)){
                            DataIO.allCustomers.remove(i);
                            DataIO.writeUser();
                        }
                    }                    
                }
                
                model.removeRow(jTable1.getSelectedRow());
                JOptionPane.showMessageDialog(this, "User Deleted!");
                resetTable();
                clearForm();
            }
        }
        else if(jTable1.getSelectedRowCount() == 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select only one row to delete");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        resetTable();
        clearForm();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        if(jTable1.getSelectedRowCount() == 1){
            String username = getUsername.getText();
            String pass = getPassword.getText();            
            String cpass = getConfirmPassword.getText();
            int selectedRow = jTable1.getSelectedRow();
            String selectedName = (String) model.getValueAt(selectedRow, 0);
            String selectedRole = (String) model.getValueAt(selectedRow, 2);
            
            if (username.isEmpty() || pass.isEmpty() || cpass.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;
            }
            if (pass.startsWith("0") || cpass.startsWith("0")) {
                JOptionPane.showMessageDialog(this, "Passwords cannot start with zero! (0)");
                return;
            }
            if (!pass.equals(cpass)) {
                JOptionPane.showMessageDialog(this, "Passwords do not match!");
                return;
            }
            
            //if the user has edited the username, it will check whether new username is taken or not.
            if (!username.equals(selectedName)) {
                try {
                    if (selectedRole.equals("Technician")) {
                        if (DataIO.checkNameTech(username) != null) {
                            JOptionPane.showMessageDialog(this, "Username is taken. Please select another username.");
                            throw new Exception();
                        }
                    } else if (selectedRole.equals("Customer")) {
                        if (DataIO.checkNameCustomer(username) != null) {
                            JOptionPane.showMessageDialog(this, "Username is taken. Please select another username.");
                            throw new Exception();
                        }
                    }
                } catch (Exception e) {
                    return;
                }
            }            
            
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to update the selected row?", "Confirm Update", JOptionPane.YES_NO_OPTION);
            
            if (option == JOptionPane.YES_OPTION){
                int password = Integer.parseInt(pass);
                
                model.setValueAt(username, jTable1.getSelectedRow(), 0);
                model.setValueAt(password, jTable1.getSelectedRow(), 1);
                
                if (selectedRole.equals("Technician")) {
                    for (int i=0; i<DataIO.allTechnicians.size(); i++) {
                        if(DataIO.allTechnicians.get(i).getName().equals(selectedName)){
                            DataIO.allTechnicians.get(i).setName(username);
                            DataIO.allTechnicians.get(i).setPassword(password);
                            DataIO.writeUser();
                        }
                    }
                } else if (selectedRole.equals("Customer")) {
                    for (int i=0; i<DataIO.allCustomers.size(); i++) {
                        if(DataIO.allCustomers.get(i).getName().equals(selectedName)){
                            DataIO.allCustomers.get(i).setName(username);
                            DataIO.allCustomers.get(i).setPassword(password);
                            DataIO.writeUser();
                        }
                    }                    
                }
   
                JOptionPane.showMessageDialog(this, "User Detail(s) Updated!");
                clearForm();
                resetTable();
            }
        }
        else if(jTable1.getSelectedRowCount() == 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select only one row to update");
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPasswordField getConfirmPassword;
    private javax.swing.JPasswordField getPassword;
    private javax.swing.JTextField getUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JToggleButton showConfirmPassword;
    private javax.swing.JToggleButton showPassword;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    public void clearForm() {
        getUsername.setText("");
        getPassword.setText(String.valueOf(""));
        getConfirmPassword.setText(String.valueOf(""));  
        showPassword.setSelected(false);
        getPassword.setEchoChar('•');
        showPassword.setText("Show");
        showConfirmPassword.setSelected(false);
        getConfirmPassword.setEchoChar('•');
        showConfirmPassword.setText("Show");
        jTable1.clearSelection();
        jScrollPane1.getVerticalScrollBar().setValue(0);
    }
    
    public void resetTable() {
        model.setRowCount(0);
        if(DataIO.allTechnicians.isEmpty()){
            JOptionPane.showMessageDialog(this, "No existing technicians.");
        }
        else{
            for(int i=0; i<DataIO.allTechnicians.size(); i++){
                Technician technician = DataIO.allTechnicians.get(i);

                String username = technician.getName();
                String password = String.valueOf(technician.getPassword());
                String role = "Technician";

                Object [] techData = {username, password, role};
                model.addRow(techData);
            }
        }
        
        if(DataIO.allCustomers.isEmpty()){
            JOptionPane.showMessageDialog(this, "No existing customers.");
        }
        else{
            for(int i=0; i<DataIO.allCustomers.size(); i++){
                Customer customer = DataIO.allCustomers.get(i);

                String username = customer.getName();
                String password = String.valueOf(customer.getPassword());
                String role = "Customer";

                Object [] customerData = {username, password, role};
                model.addRow(customerData);
            }
        }        
    }

}
